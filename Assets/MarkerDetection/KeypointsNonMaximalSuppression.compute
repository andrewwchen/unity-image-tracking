// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<int2> KeypointsBuffer;
RWTexture2D<float> KeypointsTexture;
RWTexture2D<float> Harris;
AppendStructuredBuffer<int2> SuppKeypointsAppendBuffer;

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int2 coord = KeypointsBuffer[id.x];
    float h = Harris[uint2(coord.x, coord.y)];

    // Get cornerness value of neighboring points
    uint2 neighbors[24];
    neighbors[0] = uint2(coord.x+1, coord.y+1);
    neighbors[1] = uint2(coord.x+1, coord.y);
    neighbors[2] = uint2(coord.x, coord.y+1);
    neighbors[3] = uint2(coord.x+1, coord.y-1);
    
    neighbors[4] = uint2(coord.x, coord.y+2);
    neighbors[5] = uint2(coord.x+1, coord.y+2);
    neighbors[6] = uint2(coord.x+1, coord.y-2);
    neighbors[7] = uint2(coord.x+2, coord.y-2);
    neighbors[8] = uint2(coord.x+2, coord.y-1);
    neighbors[9] = uint2(coord.x+2, coord.y);
    neighbors[10] = uint2(coord.x+2, coord.y+1);
    neighbors[11] = uint2(coord.x+2, coord.y+2);

    neighbors[12] = uint2(coord.x-1, coord.y+1);
    neighbors[13] = uint2(coord.x, coord.y-1);
    neighbors[14] = uint2(coord.x-1, coord.y-1);
    neighbors[15] = uint2(coord.x-1, coord.y);

    neighbors[16] = uint2(coord.x, coord.y-2);
    neighbors[17] = uint2(coord.x-1, coord.y+2);
    neighbors[18] = uint2(coord.x-1, coord.y-2);
    neighbors[19] = uint2(coord.x-2, coord.y-2);
    neighbors[20] = uint2(coord.x-2, coord.y-1);
    neighbors[21] = uint2(coord.x-2, coord.y);
    neighbors[22] = uint2(coord.x-2, coord.y+1);
    neighbors[23] = uint2(coord.x-2, coord.y+2);

    // check if any neighboring points have higher cornerness and are keypoints
    for (uint i1 = 0; i1 < 12; i1++) {
        uint2 n = neighbors[i1];
        if (KeypointsTexture[n] == 1.0 && Harris[n] >= h) {
            KeypointsTexture[uint2(coord.x, coord.y)] = 0.0;
            return;
        }
    }
    for (uint i2 = 12; i2 < 24; i2++) {
        uint2 n = neighbors[i2];
        if (KeypointsTexture[n] == 1.0 && Harris[n] > h) {
            KeypointsTexture[uint2(coord.x, coord.y)] = 0.0;
            return;
        }
    }

    // otherwise keep the keypoint
    SuppKeypointsAppendBuffer.Append(coord);
}
