// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#if SHADER_API_GLES3
	#define threadCount 64
    #define maxRadius 32
    #define threadCountRoot 8
#elif SHADER_API_METAL
	#define threadCount 484
    #define maxRadius 64
    #define threadCountRoot 22 
#else
	#define threadCount 1024
    #define maxRadius 92
    #define threadCountRoot 32
#endif

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float> Input;
float Threshold;
uint Width;
uint Height;
uint Edge;
AppendStructuredBuffer<int2> KeypointsBuffer;
RWTexture2D<float> KeypointsTexture;
// RWTexture2D<float3> Debug;

[numthreads(8, 8, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float I_p = Input[id.xy];

    // ignore points on the edge
    if (id.x < Edge || id.y < Edge || id.x >= Width-Edge || id.y >= Height-Edge) {
        // Debug[id.xy] = float3(I_p,I_p,I_p);
        // Result[id.xy] = float2(0,0);
        KeypointsTexture[id.xy] = 0.0;
        return;
    }

    int scale = 2;

    //// Compute Keypoints using FAST n=12
    // Get intensities of 16 points on Bresenham circle of radius 3
    float I_n[16];
    I_n[0]  = Input[uint2(id.x,           id.y-(3*scale))];
    I_n[1]  = Input[uint2(id.x+(1*scale), id.y-(3*scale))];
    I_n[2]  = Input[uint2(id.x+(2*scale), id.y-(2*scale))];
    I_n[3]  = Input[uint2(id.x+(3*scale), id.y-(1*scale))];
    I_n[4]  = Input[uint2(id.x+(3*scale), id.y)];
    I_n[5]  = Input[uint2(id.x+(3*scale), id.y+(1*scale))];
    I_n[6]  = Input[uint2(id.x+(2*scale), id.y+(2*scale))];
    I_n[7]  = Input[uint2(id.x+(1*scale), id.y+(3*scale))];
    I_n[8]  = Input[uint2(id.x,           id.y+(3*scale))];
    I_n[9]  = Input[uint2(id.x-(1*scale), id.y+(3*scale))];
    I_n[10] = Input[uint2(id.x-(2*scale), id.y+(2*scale))];
    I_n[11] = Input[uint2(id.x-(3*scale), id.y+(1*scale))];
    I_n[12] = Input[uint2(id.x-(3*scale), id.y)];
    I_n[13] = Input[uint2(id.x-(3*scale), id.y-(1*scale))];
    I_n[14] = Input[uint2(id.x-(2*scale), id.y-(2*scale))];
    I_n[15] = Input[uint2(id.x-(1*scale), id.y-(3*scale))];
    
    // Calculate if circle points are above or below threshold
    int Dir_n[16];

    for (uint i1 = 0; i1 < 16; i1++) {
        if (I_n[i1] > I_p + Threshold) {
            Dir_n[i1] = 1;
        } else if (I_n[i1] < I_p - Threshold) {
            Dir_n[i1] = -1;
        } else {
            Dir_n[i1] = 0;
        }
    }

    /*
    int cornerness = 0;
    // count the cornerness of the point
    for (uint k = 0; k < 16; k++) {
        cornerness += Dir_n[k];
    }*/

    // check if we have points_needed contiguous points above or below the threshold
    int points_needed = 10;
    int count = 0;
    int max_count = 0;
    int min_count = 0;
    for (uint i2 = 16-points_needed; i2 < 16; i2++) {
        count += Dir_n[i2];
    }
    for (uint i = 0; i < 16; i++) {
        uint j = (i + 4) - (16 * ((i + 4)/ 16)); // mod
        
        count += Dir_n[i];
        count -= Dir_n[j];
        if (count > max_count) {
            max_count = count;
        }
        else if (count < min_count) {
            min_count = count;
        }
    }

    if (max_count >= points_needed) {
        //Debug[id.xy] = float3(float(cornerness)/16.0,0,0);
        //Result[id.xy] = float2((cornerness)/16.0,0);
        KeypointsTexture[id.xy] = 1.0;
        KeypointsBuffer.Append(int2(id.x,id.y));
        return;
    }
    if (min_count <= -points_needed) {
        //Debug[id.xy] = float3(0,float(cornerness)/-16.0,0);
        //Result[id.xy] = float2(0,(cornerness)/-16.0);
        KeypointsTexture[id.xy] = 1.0;
        KeypointsBuffer.Append(int2(id.x,id.y));
        return;
    }
    KeypointsTexture[id.xy] = 0.0;

    //Debug[id.xy] = float3(I_p,I_p,I_p);
    //Result[id.xy] = 0;//float2(0,0);
    //Result[id.xy] = false;
}
